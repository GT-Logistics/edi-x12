#!/usr/bin/env php
<?php

$possibleAutoloadPaths = [
    // local dev repository
    __DIR__ . '/../vendor/autoload.php',
    // dependency
    __DIR__ . '/../../../autoload.php',
];

foreach ($possibleAutoloadPaths as $possibleAutoloadPath) {
    if (file_exists($possibleAutoloadPath)) {
        require_once $possibleAutoloadPath;

        break;
    }
}

use Gtlogistics\X12Parser\Loaders\CDataSchemaLoader;
use Gtlogistics\X12Parser\Generator\ReleaseGenerator;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Webmozart\Assert\Assert;

$application = new Application();
$application->register('generate')
    ->setDescription('Generate the required models based on the schema provided')
    ->addArgument('schema-path', InputArgument::REQUIRED, 'The path of the schemas')
    ->addArgument('output-path', InputArgument::REQUIRED, 'The path to the output directory')
    ->addArgument('namespace', InputArgument::REQUIRED, 'The namespace of the generated files')
    ->addArgument('release', InputArgument::REQUIRED, 'The release code to generate')
    ->addOption('transactions-sets', 't', InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY, 'The transaction set codes to generate. Defaults to everything', [])
    ->setCode(function (InputInterface $input) {
        $schemaPath = $input->getArgument('schema-path');
        $outputPath = $input->getArgument('output-path');
        $namespace = $input->getArgument('namespace');
        $release = $input->getArgument('release');
        $transactionSets = $input->getOption('transactions-sets');

        Assert::string($schemaPath);
        Assert::string($outputPath);
        Assert::string($namespace);
        Assert::string($release);
        Assert::isArray($transactionSets);
        Assert::allString($transactionSets);

        $schemaLoader = new CDataSchemaLoader($schemaPath);
        $release = $schemaLoader->getRelease($release, $transactionSets);

        $releaseGenerator = new ReleaseGenerator($outputPath, $namespace, $release);
        $releaseGenerator->write();

        return Command::SUCCESS;
    });
$application->run();
